
### LEET CODE ---Hard Question :

RandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.

Implement the RandomizedCollection class:

RandomizedCollection() Initializes the empty RandomizedCollection object.
bool insert(int val) Inserts an item val into the multiset, even if the item is already present. Returns true if the item is not present, false otherwise.
bool remove(int val) Removes an item val from the multiset if present. Returns true if the item is present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them.
int getRandom() Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of the same values the multiset contains.
You must implement the functions of the class such that each function works on average O(1) time complexity.

Note: The test cases are generated such that getRandom will only be called if there is at least one item in the RandomizedCollection.

 

Example 1:

Input
["RandomizedCollection", "insert", "insert", "insert", "getRandom", "remove", "getRandom"]
[[], [1], [1], [2], [], [1], []]
Output
[null, true, false, true, 2, true, 1]

Explanation
RandomizedCollection randomizedCollection = new RandomizedCollection();
randomizedCollection.insert(1);   // return true since the collection does not contain 1.
                                  // Inserts 1 into the collection.
randomizedCollection.insert(1);   // return false since the collection contains 1.
                                  // Inserts another 1 into the collection. Collection now contains [1,1].
randomizedCollection.insert(2);   // return true since the collection does not contain 2.
                                  // Inserts 2 into the collection. Collection now contains [1,1,2].
randomizedCollection.getRandom(); // getRandom should:
                                  // - return 1 with probability 2/3, or
                                  // - return 2 with probability 1/3.
randomizedCollection.remove(1);   // return true since the collection contains 1.
                                  // Removes 1 from the collection. Collection now contains [1,2].
randomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.


 ### Solution: Logic
The data structure used in the `RandomizedCollection` is a combination of a List (`values` list) and a HashMap (`indices` map).


### Data Structure:

- **`values` List:** It stores the actual values. This allows for constant time random access since we can directly access elements by index.

- **`indices` Map:** It's a map where keys are the values, and values are lists of indices where each value is present in the `values` list. This map helps in efficiently locating the indices of a particular value in the `values` list.

### Insert Operation:

The `insert` method appends the new value to the `values` list and adds its index to the corresponding list in the `indices` map. If the value is not present in the `indices` map, a new list is created for it.

### Remove Operation:

The `remove` method removes a specific value from the `values` list. It first checks if the value exists in the `indices` map. If it does, it retrieves the index to be removed from the `indices` map. If the index to be removed is not the last index in the `values` list, it swaps the last element with the element to be removed and updates the indices in the `indices` map accordingly.

### getRandom Operation:

The `getRandom` method generates a random index and retrieves the corresponding value from the `values` list.

### Complexity:

- **Insert Operation:** O(1) on average, as appending to a list and updating a hashmap are both constant time operations.

- **Remove Operation:** O(1) on average, as swapping the last element with the element to be removed and updating the hashmap are both constant time operations.

- **getRandom Operation:** O(1) since it involves generating a random index in the `values` list.

This implementation ensures that each operation works on average O(1) time complexity, meeting the requirements specified in the problem statement.